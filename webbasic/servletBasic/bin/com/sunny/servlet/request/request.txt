HttpServletRequest
HttpServletRequest对象代表客户端的请求，当客户端通过HTTP协议访问服务器时，
HTTP请求头中的所有信息都封装在这个对象中，开发人员通过这个对象的方法，可以获得客户这些信息。

getMethod()
           Returns the name of the HTTP method with which this request was made, for example, GET, POST, or PUT.
getParameter(java.lang.String name)
           Returns the value of a request parameter as a String, or null if the parameter does not exist.
getRequestURI()
           Returns the part of this request's URL from the protocol name up to the query string in the first line of the HTTP request.
getRequestURL()
           Reconstructs the URL the client used to make the request.
Http://www.sina.com/news/1.html  URL      子
                       /news/1.html  URI  父 
                       
获得客户机信息
	getRequestURL方法返回客户端发出请求时的完整URL。
	getRequestURI方法返回请求行中的资源名部分。
	getQueryString 方法返回请求行中的参数部分。
	getPathInfo方法返回请求URL中的额外路径信息。额外路径信息是请求URL中的位于Servlet的路径之后和查询参数之前的内容，它以“/”开头。
	getRemoteAddr方法返回发出请求的客户机的IP地址
	getRemoteHost方法返回发出请求的客户机的完整主机名
	getRemotePort方法返回客户机所使用的网络端口号
	getLocalAddr方法返回WEB服务器的IP地址。
	getLocalName方法返回WEB服务器的主机名
	获得客户机请求头
	getHeader方法 
	getHeaders方法 
	getHeaderNames方法 
	获得客户机请求参数(客户端提交的数据)
	getParameter方法
	getParameterValues（String name）方法
	getParameterNames方法 
	getParameterMap方法
	
request常见应用1
	防盗链
		//获取头相关数据
		String headValue=request.getHeader("Accept-Encoding");
		Enumeration e=request.getHeaderNames();
		while(e.hasMoreElements()){
			String value=(String) e.nextElement();
			System.out.println(value);
		}
		
		e=request.getHeaderNames();
		while(e.hasMoreElements()){
			String name=(String) e.nextElement();
			String value=request.getHeader(name);
			System.out.println("name="+name+",value="+value);
		}
			}	
		
		String value=request.getParameter("username");
		System.out.println(value);
		
		Enumeration e=request.getParameterNames();
		while(e.hasMoreElements()){
			String name=(String) e.nextElement();
			value=request.getParameter(name);
			System.out.println(name+"="+value);
		}
		
		String value2[]=request.getParameterValues("username");
		for(String v:value2){
			System.out.println("u="+v);
		}
		
		Map<String,String[]> map=request.getParameterMap();
		User user=new User();
		User formbean=new User();
		try {
			BeanUtils.populate(user, map);//用map集合填充bean
			BeanUtils.copyProperties(user, formbean);//bean的拷贝
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		System.out.println(user);
		
		InputStream in=request.getInputStream();
		 byte buffer[]=new byte[1024];
		 int len=0;
		 while((len=in.read(buffer))>0){
		 	System.out.println(new String(buffer,0,len));
		 }
		 
	各种表单输入项数据的获取
		text、password、radio、checkbox、file、select、textarea、 hidden、image、button给js编程用
		<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
		<html>
		  <head>
		    <title>带数据给requestDemo3</title>
		    <meta http-equiv="content-type" content="text/html; charset=UTF-8">    
		  </head>  
		  <body>
		    <br>
		    <!-- Url后跟中文数据要编码后提交--> 
		    <form action="/day06/servlet/requestDemo3" method="post">
		    	 用户名1
		:<input type="text" name="username"/><br/>
		       	 密码:
		<input type="password" name="password"/><br/>
		       	 性别:
		       	 <input type="radio" name="gender" value="male" />男
		       	 <input type="radio" name="gender" value="female" />女 <br/>
		       	 
		       	 所在地:<select name="city">
		       	 	<option value="beijing">北京</option>
		       	 	<option value="shanghai">上海</option>
		       	 	<option value="cs">长沙</option>
		       	 </select><br/>
		       	 爱好：
		       	 <input type="checkbox" name ="likes" value="single" />唱歌
		       	 <input type="checkbox" name ="likes" value="dance" />跳舞
		       	 <input type="checkbox" name ="likes" value="basketball" />篮球
		       	 <input type="checkbox" name ="likes" value="football" />足球
		       	 <br/>
		       	 备注：<textarea rows="5" cols="60" name="description"  ></textarea>
		       	 <br/>
		       	 大头照<input type="file" name="image" /><br/>
		       	 <input type="hidden" name="id" value="123456"/>
		       	 
		    	 <input type="submit" value="提交"/>
		    </form>
		  </body>
		</html>
		
		request.getParameter("username");
		request.getParameter("password");
		request.getParameter("gender");
		request.getParameter("city");
		request.getParameter("city");
		String[] likes=request.getParameterValues("likes");
		for(int i=0;likes!=null && i<likes.length;i++){
			System.out.println(likes[i]);
		}
		request.getParameter("description");
		
		request.getParameter("id");
		
	web资源处理。
		setAttribute方法 
		getAttribute方法  
		removeAttribute方法
		getAttributeNames方法
		
		//servlet中
		String message="aaaaaa";
		request.setAttribute("data", message);
		request.getRequestDispatcher("/mesage.jsp").forward(request, response);
		
			Jsp中 <%
		    String mess=(String)request.getAttribute("message");
		    out.write(mess);    
		     %>
		     
	avascript防止表单重复提交
	URL地址的编码
	request对象实现请求转发：请求转发指一个web资源收到客户端请求后，通知服务器去调用另外一个web资源进行处理。
	请求转发的应用场景：MVC设计模式
	request对象提供了一个getRequestDispatcher方法，该方法返回一个RequestDispatcher对象，
	调用这个对象的forward方法可以实现请求转发。
	request对象同时也是一个域对象，开发人员通过request对象在实现转发时，把数据通过request对象带给其它
	
	请求转发的细节
		forward方法用于将请求转发到RequestDispatcher对象封装的资源。
		如果在调用forward方法之前，在Servlet程序中写入的部分内容已经被真正地传送到了客户端，
		forward方法将抛出IllegalStateException异常。 
		如果在调用forward方法之前向Servlet引擎的缓冲区中写入了内容，
		只要写入到缓冲区中的内容还没有被真正输出到客户端，
		forward方法就可以被正常执行，
		原来写入到输出缓冲区中的内容将被清空，但是，已写入到HttpServletResponse对象中的响应头字段信息保持有效。
		
	请求重定向和请求转发的区别
		一个web资源收到客户端请求后，通知服务器去调用另外一个web资源进行处理，称之为请求转发。
		一个web资源收到客户端请求后，通知浏览器去访问另外一个web资源，称之为请求重定向。
		RequestDispatcher.forward方法只能将请求转发给同一个WEB应用中的组件；
		而HttpServletResponse.sendRedirect 方法还可以重定向到同一个站点上的其他应用程序中的资源，
		甚至是使用绝对URL重定向到其他站点的资源。 
		如果传递给HttpServletResponse.sendRedirect 方法的相对URL以“/”开头，
		它是相对于整个WEB站点的根目录；如果创建RequestDispatcher对象时指定的相对URL以“/”开头，
		它是相对于当前WEB应用程序的根目录。 
		调用HttpServletResponse.sendRedirect方法重定向的访问过程结束后，
		浏览器地址栏中显示的URL会发生改变，由初始的URL地址变成重定向的目标URL；
		调用RequestDispatcher.forward 方法的请求转发过程结束后，浏览器地址栏保持初始的URL地址不变。
		HttpServletResponse.sendRedirect方法对浏览器的请求直接作出响应，
		响应的结果就是告诉浏览器去重新发出对另外一个URL的访问请求；
		RequestDispatcher.forward方法在服务器端内部将请求转发给另外一个资源，
		浏览器只知道发出了请求并得到了响应结果，并不知道在服务器程序内部发生了转发行为。 
		RequestDispatcher.forward方法的调用者与被调用者之间共享相同的request对象和response对象，
		它们属于同一个访问请求和响应过程；而HttpServletResponse.sendRedirect方法
		调用者与被调用者使用各自的request对象和response对象，
		它们属于两个独立的访问请求和响应过程。
