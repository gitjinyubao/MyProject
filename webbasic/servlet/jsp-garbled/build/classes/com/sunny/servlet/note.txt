Get,Post请求中文乱码问题有效解决方法
 
对于做Java WEB项目同学来说，中文乱码问题是一个经常遇到而又非常头痛的问题，
而最容易出现乱码的环节就是在浏览器向服务器发送请求的过程，至于出现乱码的原因不是本文的关注的重点，想了解的朋友可以参考
http://zhaomin819111.blog.163.com/blog/static/10659004200943112950956/

本文主要介绍如何有效解决web请求中的乱码问题，其实解决方法有很多种，不同的请求类型解决方法也不相同。

本文只介绍最方便的一种：

1、针对Post方式提交的请求如果出现乱码，可以每次在request解析数据时设置编码格式：

request.setCharacterEncoding("utf-8");

也可以使用编码过滤器来解决，最常用的方法是使用spring提供的编码过滤器：

在Web.xml中增加如下配置（要注意的是它的位置一定要是第一个执行的过滤器）：

<filter>
<filter-name>charsetFilter</filter-name>
<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
<init-param>
<param-name>encoding</param-name>
<param-value>UTF-8</param-value>
</init-param>
<init-param>
<param-name>forceEncoding</param-name>
<param-value>true</param-value>
</init-param>
</filter>

该过滤器要做的其实就是强制为所有请求和响应设置编码格式：

request.setCharacterEncoding("utf-8");
response.setCharacterEncoding("utf-8");

2、针对Get方式的乱码问题，由于参数是通过URL传递的，所以上面通过request设置的编码格式是不起作用的，
此时可以在每次发生请求之前对URL进行编码：例如：Location.href="/encodeURI"("http://localhost/test/s?name=中文&sex=女");

当然也有更简便的方法，那就是在服务器端配置URL编码格式：

一种：修改tomcat的配置文件server.xml：（公司项目不建议使用・）
             <Connector URIEncoding="UTF-8" 
                 port="8080"   maxHttpHeaderSize="8192"
               maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
               connectionTimeout="20000" disableUploadTimeout="true" />

只需增加 URIEncoding="UTF-8"  这一句，然后重启tomcat即可。

《============================
   1> 在tomcat的server.xml设置<Connector URIEncoding="utf-8"  />， 
	   使用utf8对URI中出现的中文进行decode，例如http://localhost:8080/test/测试.do -> 
	 http://localhost:8080/test/%E6%B5%8B%E8%AF%95.do, 这样能够找到对应的controller方法。
	   若不设置使用默认值ISO-8859-1


   2> 在tomcat的server.xml设置<Connector useBodyEncodingForURI="true"  />
              能够解决query String的乱码问题。
	  useBodyEncodingForURI=true -> 使用http header中指定charset进行decode(例如：
	  Content-Type: charset=UTF-8)，若未指定，则使用默认值ISO-8859-1
	  useBodyEncodingForURI=false -> 使用默认值ISO-8859-1
	  
   3> 若只配置了URIEncoding="utf-8"，则query string的编码也会被设置为utf-8，
	   且http header中设置的charset不会重写这个编码。若同时设置了两项，则对于query string的编码，
	   则与设置useBodyEncodingForURI=true的作用是一样的（会被http header中的charset重写）

   4> 建议使用utf-8为主，可以在web.xml 中配置encoding filter来指定默认的编码为utf-8，避免乱码问题的出现。
	  <filter>
	    <filter-name>encoding_filter</filter-name>
	    <filter-class >
	      org.springframework.web.filter.CharacterEncodingFilter
	    </filter-class>
	    <init-param>
	      <param-name>encoding</param-name>
	      <param-value>UTF-8</param-value>
	    </init-param>
	  </filter>
	  <filter-mapping>
	    <filter-name>encoding_filter</filter-name>
	    <url-pattern>/*</url-pattern>
	  </filter-mapping>

==============================》

二种：将服务器端通过默认编码解码的字符串进行字符串的编码转换：
	String username = request.getParameter("username"); 
	username = new String(username.getBytes("iso8859-1"), "utf-8"); // get提交方式设置码表

相信通过这两段配置，你再也不用担心遇到乱码啦，当然数据库还有可能出现乱码，那将是另一篇文章的事啦！

《=========================================================================》
GET提交乱码原因分析：
 public class ThinkIng {
 2     public static void main(String[] args) throws Exception {
 3         System.out.println("\t------JSP模拟------");
 4         System.out.println("客户端，有一个中文字符的请求(转换成了字节序列发送)，发送至服务器端");
 5         String request="请求";
 6         byte[] client=request.getBytes();//客户端的请求的字节序列
 7         print(client);
 8         System.out.println();//分割用的
 9         System.out.println("有一中间件，将发送的字符序列一默认的编码格式(iso-8859-1)进行解码");
10         String sever=new String(client,"iso-8859-1");
11         System.out.println(sever);
12         System.out.println("程序猿发现，这边有问题，中文有乱码，前来解决！");
13         String debug=new String(sever.getBytes("iso-8859-1"),"gbk");//还原字节序列，使用“gbk”重新进行解码！
14         System.out.println(debug);
15         System.out.println("问题解决！");
16     }
17     public static void print(byte[] b){//用于显示字节序列的
18         for(byte b1:b){
19             System.out.print(Integer.toHexString(b1 & 0xff)+" ");
20         }
21     }
22 }

先前没有想通主要是自己没注意到：
没有着重的想为什么会在输出时出现字符乱码？
客户端发送求时，字符转换成字节序列时的编码方式是什么样的？
　　总的来说，乱码是由于编码方式与解码方式不一致导致的，这一句话没有理解透！如果当时这样想既然出现了乱码，肯定是那边的编码格式和解码格式不一致，就好了！

　　注：编码：将字符串转换成字节序列；解码：将字节序列转换成字符串