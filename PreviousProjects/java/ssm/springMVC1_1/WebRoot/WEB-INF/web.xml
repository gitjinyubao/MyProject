<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
  <display-name></display-name>	
  
  <servlet>
  <servlet-name>springMVC</servlet-name>
  <!-- servlet对应的java类 -->
  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  <!--      1.通过servlet自启动的方式得到webApplicationContext
                  当前servlet的参数信息, 此处的参数名称事故定为：
      contextConfigLocation(上下文配置位置) ,
                  通过这个就可以得到webApplicationContext
            2.通过WEB容器监听器得到
            <context-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/springMVC-servlet.xml</param-value>
            </context-param>
            
            <listener>
            <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
            </listener>
      -->
  <init-param>
  <param-name>contextConfigLocation</param-name>
  <param-value>/WEB-INF/springMVC-servlet.xml</param-value>
  </init-param>
  <!-- 在web应用启动时就加载servlet;如果没有这样配置，那么就会是在等到客户HTTP请求时 才会加载servlet-->
  <load-on-startup>1</load-on-startup>
  </servlet>
  
  <!-- 映射声明 -->
  <servlet-mapping>
  <!-- 请求对应的servlet名称 -->
  <servlet-name>springMVC</servlet-name>
  <!-- 监听当前域的所有请求 -->
  <url-pattern>/</url-pattern>
  </servlet-mapping>  
  
  <!-- 默认首页 -->
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
</web-app>
